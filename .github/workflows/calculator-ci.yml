# Базовое имя workflow - отображается в интерфейсе GitHub Actions
name: Python Calculator CI

# Триггеры: когда запускать этот workflow
on: [push, pull_request]  # Активируется при любом push'е или создании PR

jobs:
  # Определяем одну job с именем "test"
  test:
    # Запускаем на последней версии Ubuntu (альтернативы: windows-latest, macos-latest)
    runs-on: ubuntu-latest
    
    steps:
    # Шаг 1: Получаем код из репозитория
    - name: Checkout code
      uses: actions/checkout@v3  # Стандартное действие для получения кода
      # Можно указать ветку: with: ref: my-branch
      
    # Шаг 2: Устанавливаем Python
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"  # Можно указать '3.x' для последней версии
        # Дополнительно можно кэшировать pip: cache: 'pip'
        
    # Шаг 3: Устанавливаем зависимости
    - name: Install dependencies
      run: |  # Многострочная команда
        python -m pip install --upgrade pip  # Обновляем pip
        pip install pytest pylint  # Ставим тестовые инструменты
        # Можно добавить: pip install -r requirements.txt
        
    # Шаг 4: Запуск unit-тестов
    - name: Run unit tests
      run: |
        # Динамически создаем тестовый файл
        cat > test_calculator.py <<EOF
        import pytest
        from calculator_code import Calculator
        
        def test_add():
            assert Calculator().add(2, 3) == 5
            
        def test_divide_by_zero():
            with pytest.raises(ValueError):
                Calculator().divide(10, 0)
        EOF
        
        pytest -v test_calculator.py  # -v для подробного вывода
        # Можно добавить coverage: pytest --cov=calculator_code
        
    # Шаг 5: Проверка стиля кода
    - name: Lint check
      run: pylint --disable=missing-docstring calculator_code.py
      # Другие опции: --fail-under=8.0 (минимальный балл)
      # Альтернативы: black --check, flake8
      
    # Шаг 6: Демонстрационный запуск
    - name: Run calculator
      run: python calculator_code.py  # Просто запускаем основной скрипт
      
    # Шаг 7: Сохраняем артефакты
    - name: Build artifact
      uses: actions/upload-artifact@v4  # Актуальная версия!
      with:
        name: calculator-output  # Имя артефакта
        path: |  # Какие файлы сохранить
          calculator_code.py
          test_calculator.py
        # retention-days: 5 (сколько хранить артефакт)
        